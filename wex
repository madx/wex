#!/usr/bin/env bash

# Bash strict mode http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

# Set defaults for XDG vars if needed
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}

WEX_CONFIG=$XDG_CONFIG_HOME/wex/wex.json
WEX_CACHE=$XDG_CACHE_HOME/wex
WEX_ENTRIES_CACHE=$XDG_CACHE_HOME/wex_entries
WEX_ERRORS=$XDG_RUNTIME_DIR/wex_error
WEX_ICONS='{copy: "üìãÔ∏è", exec_copy: "üìãÔ∏è", clipboard_filter: "üîÄ", exec: "‚öôÔ∏è"}'

if [ ! -f $WEX_CONFIG ]; then
  echo "No config found. Create one in $WEX_CONFIG."
  exit 1
fi

# Available commands
wex_cmd_copy() {
  wl-copy "$@"
}

wex_cmd_exec_copy() {
  output=$(eval $@)
  wl-copy "$output"
}

wex_cmd_exec() {
  eval $*
}

wex_cmd_clipboard_filter() {
  format=${1:-"%s"}
  clipboard="$(wl-paste)"
  declare -a replacements
  replacements=()
  for arg in ${@:2}; do
    command=$(printf $arg "$clipboard")
    replacements+=($(eval $command))
  done
  replaced=$(printf $format ${replacements[@]})
  wl-copy "$replaced"
}

# Entry management
wex_build_entries() {
  read -r -d '' BUILD_ENTRIES <<ENDJQ || true
  def geticon(command): command as \$command | ( ${WEX_ICONS} | .[\$command]);
  .[] | [
    .id,
    "\t",
    geticon(.command),
    " <span color=\"gray\">|</span> ",
    .label,
    if has("help") then
      " <span color=\"gray\" size=\"smaller\">‚Äî \(.help)</span>"
    else
      null
    end
  ] | join("")
ENDJQ
  jq -r "$BUILD_ENTRIES" $WEX_CONFIG > $WEX_ENTRIES_CACHE
}

wex_show_entry() {
  grep -E "^${1:-}	" $WEX_ENTRIES_CACHE | cut -f2- | tr -d "\n"
}

if [ ! -f $WEX_ENTRIES_CACHE ]; then
  wex_build_entries
elif [ $WEX_CONFIG -nt $WEX_ENTRIES_CACHE ]; then
  wex_build_entries
fi

if [ "${1:-}" = "pre-display-cmd" ]; then
  wex_show_entry "${2:-}"
  exit 0
fi

# Main
match=$(jq -r '.[] | .id' $WEX_CONFIG |\
  wofi --dmenu \
    --allow-markup \
    --normal-window \
    --matching fuzzy \
    --insensitive \
    --cache-file $WEX_CACHE \
    --pre-display-cmd "$0 pre-display-cmd '%s'" \
    --prompt wex)
command=$(jq -r '.[] | select(.id == "'${match}'") | .command' $WEX_CONFIG)
args=($(jq -r '.[] | select(.id == "'${match}'") | .args | join("\n")' $WEX_CONFIG))
fn="wex_cmd_${command}"
($fn ${args[@]} 2>${WEX_ERRORS}) || notify-send --app-name wex "Unable to run $fn ${args[@]}" "$(cat ${WEX_ERRORS})"


